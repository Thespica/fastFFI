# Develop Notes

## Terminology

### Common

. Library: A library is typically an ELF file that has a name and a set of symbols that can be accessed.
. Symbol: A symbol is a name of a native function or a native global.
. Native Function: A native function has a name (i.e., the symbol) and a sequence of native instructions.
. Native Global (Variable): A native global (variable) has a name (i.e., the symbol).
. vtable:
.. See https://github.com/lvc/vtable-dumper

### LLVM

. LLVM Bitcode: https://llvm.org/docs/LangRef.html
. LLVM Module: An LLVM module is a single file that can be interpreted by the LLVM interpreter.
Basically, an LLVM module defines a list of LLVM globals and LLVM functions.
. LLVM Function: An LLVM function has a name, a signature, and a sequence if LLVM bitcode instructions.
. LLVM Global: An LLVM global has a name.
. External Function: A function that has been accessed by the LLVM code but does not exist in the LLVM module.

### Java/JVM

. Java/JVM Bytecode: https://docs.oracle.com/javase/specs/jvms/se15/html/index.html
. Java Method: A Java method has a name, a signautre, and a sequence of JVM bytecode instructions.
. Java Field: A Java field has a name and a type.

## Type Mapping

.Supported Types
|===
| Java Type | LLVM Type
|`boolean`
|`i1`
|`byte`
|`i8`
|`short`
|`i16`
|`int`
|`i32`
|`long`
|`i64`
|`float`
|`float`
|`double`
|`double`
|`long`
|`void*`
|===


## Runtime Support

### Support Stack Allocation

# Library Class


For each library, we will generate a library Java class for it.
This library class is used to as the namespace or container
for synthesized static Java fields that
correspond to LLVM globals and synthesized static methods that
correspond to LLVM functions.

### Synthesized Static Fields

Each static fields has a corresponding symbol,
which may be a native global or a native function.
The symbol is recorded via a Java annotation.
During class initialization of the library class,
we will scan all static fields and use `dlsym` to lookup the raw address of each symbol.



## Invoker Class

We create an `Invoker` class for each signature.
At runtime, we will use `Proxy` to initialize each invoker based on the selected FFI implementation.
Currently, the FFI we used is https://github.com/jnr/jnr-ffi:[`jnr-ffi`] released in project `JNR`.



## Calling Convention

Sulong introduces an additional `StackPointer`
as the first argument for each LLVM function.
However, we found that this argument is useless in most cases,
when there is no stack allocation.
This information can be easily obtained by scanning the bitcode instructions.


To ease management of method signatures
and support stack allocation as well,
we create a Java method that has the same signature and name as the LLVM function.

. If there is no stack allocation, we synthesize one Java method for the function.
The argument at index 0 is the first argument of the LLVM function.
. If there is stack allocation, we synthesize two Java methods for the LLVM function:
.. Wrapper method: A wrapper method has the same name and signature as the LLVM function.
The only thing it does is to initialize the stack pointer and pass it
as the first argument to the wrappee method.
.. Wrappee method: A wrappee method has a private visibility and has a mangled name.
The signature has a `StackPointer` as the first argument.

### Passing By Value

1. Return a Value object or struct.
Caller should provide space for returning struct.
2. Passing in a Value object or struct.
Caller should allocate space and copy values (avoid modification from callee);

## Translation Rules

### `'call'` Instruction

The translation of https://llvm.org/docs/LangRef.html#call-instruction[call instruction]
falls into three cases:

. Direct Call: A direct call knows the symbol of the target function. This case has two subcases:
.. The target function is a LLVM function that has been successfully translated into a Java method.
... We will create a Java method in the corresponding library class and fill the method with the translated bytecode.
.. The target function is a LLVM function that cannot be translated into a Java method
or the target function is an external function that does not even have LLVM bitcode.
... We will create a Java static field that holds the address of the target function by runtime lookup with the given symbol.
Then, we will create a stub method that makes an indirect call with the given resolved target function.
. Indirect Call: An indirect call does not know the symbol of the exact target.
We have to always make indirect call.

## Limitations

### Types and Foreign Function Interface

A Java bytecode instruction can only direct access methods that has Java types.
We cannot translate an LLVM function that has unsupported types in the signature into a Java method.

### Visibility

An LLVM function or an LLVM global may not be visible in a shared library.
That means, we may not be able to find its native counterparts in an ELF file
with the same symbol.


[bibliography]
## Reference

- [[[cxx-dlopen]]] https://tldp.org/HOWTO/C++-dlopen/index.html
- [[[cxx-abi]]] https://itanium-cxx-abi.github.io/cxx-abi/
