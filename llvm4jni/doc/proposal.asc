# LLVMToJVM：Break the Barrier between LLVM and JVM

## 背景和需求

JVM是最好的托管程序语言执行环境，有着强大的垃圾回收实现和即时编译器。
LLVM IR作为一种中间的代码的表示形式可以单独解释执行，其包含了二进制文件中所需要的所有信息。
LLVM是目前最为流行的用于开发C/C++/Rust等本地(native)编译器的框架，这些本地语言可以先通过前端生成对应的LLVM IR，
再由对应的后端（例如x86或者WebAssembly）生成对应的目标语言。

JVM和LLVM之间存在互相调用的需求和支持。JVM通过native关键字修饰的方法可以将一个Java方法绑定到对应的本地代码实现，
而本地代码可以通过JVM提供的JNI接口来访问JVM中的方法和对象。

JVM和LLVM两者都广泛运用于生产环境，然而两者之间却存在一些屏障。
也就是说JVM不能直接执行和访问LLVM代码，而LLVM也无法直接使用JVM中的运行的对象和方法，
因此两者的编译器无法优化对方的代码以消除两者之间的调用存在的额外开销。

为了消除JVM和本地代码之间的屏障，我们提出LLVMToJVM，一种将LLVM的Bitcode转换成JVM的Bytecode的技术。
通过这种技术，原来由C或者C++开发的本地程序，经过相应的编译器生成LLVM Bitcode之后，再通过LLVMToJVM将LLVM Bitcode转换成JVM Bytecode。
这样以来，JVM可以统一优化这些代码，进一步消除两者之间调用的开销。


## 技术适用场景

LLVMToJVM有广泛的使用场景，通过在ATA上初步调研，阿里内部存在以下几种可能的使用场景：

### 直接访问原生的数据结构

. In-memory计算平台
.. Grape
.. Blink中通过RocksDB数据库来了存储状态信息：
... https://www.atatech.org/articles/173474?spm=ata.13269325.0.0.399549faDRCbfa
... RocksDB相对复杂，JNI可能只占性能开销的10%。
. 机器学习平台：机器学习的Java平台出来在服务器端有潜在应用场景，在Android移动端也有需求。
.. TensorFlow
... TensorFlow Java SDK目前还在开发中，用户可以事先训练好一个model，然后通过Java SDK做inference，结果是一个Tensor对象，通过native访问cpp版本的实现的Tensor对象。
... https://github.com/tensorflow/tensorflow/blob/master/tensorflow/java/src/main/native/tensor_jni.cc[tensor_jni.cc]
.. PyTorch
... https://github.com/pytorch/pytorch/blob/master/android[PyTorch Android]
. 机器学习库：
.. libsentencepiece：一些离线计算库会使用libsentencepiece来处理文本。
... https://github.com/levyfan/sentencepiece-jni/blob/master/src/main/native/com_github_google_sentencepiece_SentencePieceJNI.cc[SentencePieceJNI.cc]
. 多媒体库
.. OpenCV：提供Java Bindings，对例如矩阵的一些操作。
... https://github.com/opencv/opencv/blob/master/modules/java/generator/src/cpp/Mat.cpp[Mat.cpp]
. SIMD的native实现的wrapper
.. simdjson：目前simdjson读很快，但是不支持写，在阿里内部还没有发现具体使用场景。
在外网，一些依赖JSON作为输入的分析工具会利用simdjson读取数据。
. native代码问题诊断
.. Java应用通过JNI访问本地代码常常遇到各种难以调试的问题。由于这部分本地代码JVM无法管理和感知，因此基于JVM的一些问题诊断工具无法处理本地代码中的错误以及性能信息。
. 替代人工手写的Unsafe
.. 通过Unsafe访问数据需要提供正确的Offset，当native代码发生变化时需要同时更新Java代码中的Offset。
采用LLVMToJVM可以直接通过JNI开发，之后通过LLVMToJVM转成Bytecode来进行高效的访问。

## 使用流程

基于JNI开发的项目主要分成三个部分：

. Java SDK，这里存在一些native关键字修饰的方法
. C/C++/Rust开发的本地库的实现
. C/C++/Rust开发的JNI方法，主要是完成Java和本地代码的互相调用。

当用户完成开发之后，一般递交的二进制文件有两种：

* Java的类文件(`*.jar`)
* 共享链接库(`*.so`)

如果采用GraalVM中里面llvm-toolchain，则共享链接库里包含了内嵌的LLVM Bitcode。
反之，用户需要通过clang生成对应的Bitcode，因此还额外需要：

* LLVM Bitcode文件(`*.bc`)

LLVMToJVM以Java类文件，共享链接库和LLVM Bitcode作为输入。
通过扫描Java类文件发现Java的native方法，根据JVM的扫描LLVM Bitcode，
找到对应的native方法的实现。通过解析和分析LLVM Bitcode，尝试将这些Bitcode转换成Java bytecode，
并通过字节码重写技术写入输入的Java类文件中。用户只需要采用这些重写后的Java类文件，即可获得性能提升。


### 对用户的影响

. 性能的影响：
.. 理想情况，所有的Bitcode都应该转换成对应的简单形式的Java Bytecode，但是存在一些Bitcode是无法高效转换的。一个例子就是通过函数指针的间接方法调用。
为了支持函数指针的调用，我们必须采用JNI的方式来将执行从Java的Bytecode世界转换到支持函数指针调用的native世界。
这时对性能的影响分两种情况：
... 间接方法调用存在所有的或者大多数的执行路径，性能显著降低：
这个时候我们需要取消将当前Bitcode方法转成Bytecode，用户此时获得不到性能提升。
... 间接方法调用仅存在一些少数情况，例如错误处理等执行路径，性能仍然可以在多数情况下提升：
这个时候我们仍然将当前的Bitcode转成Bytecode，用户此时仍然可以获得性能提升。
. 编程习惯的影响:
.. JNI的开发者往往由于JNI的开销比较大，因此一般会选择将复杂的逻辑写入一个native方法中，而Java更加喜欢小、简单的方法。
.. 由于函数指针影响性能，因此我们要在性能关键的执行路径上减少函数指针的使用。
... Virtual Dispatching：虚方法调用在LLVM Bitcode层会替换成若干条指令，即读取vtable，根据index获得函数指针，
最终的调用是通过函数指针来完成调用的。然而Virtual Dispatching在现代的C++程序中非常普遍，
目前规划中的解决方式是在LLVM层实现devirtualization。这个优化需要在ELF文件中读取所有的vtable。

## 技术风险

. LLVM Bitcode转成JVM Bytecode的成功率，越高的成功率理论带来越多的性能开销，然后由于不可忽略的差异，一些LLVM Bitcode再转换成LLVM‘
. 无法获得完整的LLVM Bitcode，无法兼容ELF文件格式。
.. 目前的使用场景是通过LLVMToJVM将一小部分核心native代码转成JVM Bytecode，存在一些precompiled的库是没有对应的LLVM Bitcode的（例如内核中的系统调用）。
这部分代码如果需要在JVM Bytecode层访问，则需要采用JNI，且这些方法的签名需要满足JVM FFI的类型限制。
. 生成的JVM Bytecode对JVM的JIT不友好。
.. 目前观测的一个问题是自动生成的Bytecode比较臃肿，导致对应的Java的方法尺寸较大，JIT中一些基于代码尺寸的启发式规则则无法适用。

## 相关技术

LLVMToJVM的目标是加速基于JNI开发的库的执行效率，而不是替代JNI或者其他FFI。

### Java Native Interface (JNI)

JNI是标准的Java访问本地代码的通用的编程接口，优势是官方制定稳定的接口，劣势是对于一些简单的本地代码的访问开销比较大。
JNI通过本地语言开发，开发者可以选择C/C++甚至Rust。
LLVMToJVM技术不是替代JNI技术，而是对JNI实现的本地代码的优化。

### Apache Arrow

Arrow目标是针对内存内大量数据交换而设计的格式和相关的操作库，本质上需要将数据编排成Arrow支持的格式，并不是原生数据结构的直接访问。
LLVMToJVM的本质是消除JNI调用的开销，让JVM更加高效的访问和Arrow是不同的技术

### JEP 191: Foreign Function Interface

JEP 191目标是自动为native代码生成对应的Java Bindings。JEP 191是一个仍在开发的工作，目前极大可能是基于Java Native Runtime (JNR)实现的。
类似的库有很多，例如：

. Java Native Access (JNA)
. JNR
. Truffle NFI

JEP 191或类似的库的目标主要是降低JNI开发的流程的繁琐程度，并不是为了解决JNI的性能问题，在目前的JVM实现中，
其本质还是需要通过JNI来完成JVM到本地语言的调用。
LLVMToJVM可以借助这些库的设计理念，通过LLVM生成对应的JNI Bindings，再将其自动转换成JVM Bytecode。


### JEP 383: Foreign-Memory Access API

JDK 15的release包含了JEP 383 (Second Incubator) ，
该JEP类似Apache Arrow，提供的主要是Memory操作的接口，具体的底层实现可以采用Unsafe。
用户需要利用这些接口编程来操作底层数据。
LLVMToJVM与之不同，LLVMToJVM允许用户直接采用本地代码实现的方式操纵数据。